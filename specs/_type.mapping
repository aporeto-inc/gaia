'[][]interface{}':
  elemental:
    type: '[][]interface{}'
    init: '[][]interface{}{}'
  jsonschema:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "array",
          "items": true
        }
      }
  openapi3:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }

'[][]string':
  elemental:
    type: '[][]string'
    init: '[][]string{}'
  jsonschema:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
  openapi3:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }

'[]byte':
  elemental:
    type: '[]byte'
    init: '[]byte{}'
  jsonschema:
    type: |-
      {
        "type": "string"
      }
  openapi3:
    type: |-
      {
        "type": "string"
      }

'[]map[string]interface{}':
  elemental:
    type: '[]map[string]interface{}'
    init: '[]map[string]interface{}{}'
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        }
      }
  openapi3:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }

'[]map[string]string':
  elemental:
    type: '[]map[string]string'
    init: '[]map[string]string{}'
  jsonschema:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
  openapi3:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }

'[]time.Time':
  elemental:
    type: '[]time.Time'
    init: '[]time.Time{}'
  jsonschema:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "string",
          "format": "date-time"
        }
      }
  openapi3:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "string",
          "format": "date-time"
        }
      }

_arch_list:
  elemental:
    type: types.ArchitecturesTypeList
    init: types.ArchitecturesTypeList{}
    import: go.aporeto.io/gaia/types
  jsonschema:
    type: |-
      {
        "type": "array",
        "items": {
          "$ref": "isolation-profile-types.json#/architecturestype"
        }
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_audit_profile_rule_list:
  elemental:
    type: types.AuditProfileRuleList
    init: types.AuditProfileRuleList{}
    import: go.aporeto.io/gaia/types
  jsonschema:
    type: |-
      {
        "type": "array",
        "items": {
          "$ref": "audit-types.json#/auditprofilerule"
        }
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_automation_entitlements:
  elemental:
    type: map[string][]elemental.Operation
    init: map[string][]elemental.Operation{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "$ref": "elemental-types.json#/operation"
          }
        }
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_automation_events:
  elemental:
    type: map[string][]elemental.EventType
    init: map[string][]elemental.EventType{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
             "$ref": "elemental-types.json#/eventtype"
          }
        }
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_cap_map:
  elemental:
    type: types.CapabilitiesTypeMap
    init: types.CapabilitiesTypeMap{}
    import: go.aporeto.io/gaia/types
  jsonschema:
    type: |-
      {
        "$ref": "isolation-profile-types.json#/capabilitiestypemap"
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_claims:
  elemental:
    type: '*types.MidgardClaims'
    init: types.NewMidgardClaims()
    import: go.aporeto.io/gaia/types
  jsonschema:
    type: |-
      {
        "$ref": "midgard-types.json#/midgardclaims"
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_elemental_identifiable:
  elemental:
    type: elemental.Identifiable
  jsonschema:
    type: |-
      {
        "$ref": "elemental-types.json#/identifiable"
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_portlist:
  elemental:
    type: '[]*portutils.PortsRange'
    init: '[]*portutils.PortsRange{}'
    import: go.aporeto.io/gaia/portutils
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        }
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_rendered_policy:
  elemental:
    type: map[string]PolicyRulesList
    init: |-
      map[string]PolicyRulesList{
        string(constants.RenderedPolicyTypeNetwork): {},
        string(constants.RenderedPolicyTypeFile): {},
        string(constants.RenderedPolicyTypeIsolation): {},
      }
    import: go.aporeto.io/gaia/constants
  jsonschema:
    type: |-
      {
        "$ref": "_lists.json#/properties/policyrules"
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_syscall_action:
  elemental:
    type: types.SyscallEnforcementAction
    import: go.aporeto.io/gaia/types
  jsonschema:
    type: |-
      {
        "$ref": "isolation-profile-types.json#/syscallenforcementaction"
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_syscall_rules:
  elemental:
    type: types.SyscallEnforcementRulesMap
    init: types.SyscallEnforcementRulesMap{}
    import: go.aporeto.io/gaia/types
  jsonschema:
    type: |-
      {
        "$ref": "isolation-profile-types.json#/syscallenforcementrulesmap"
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

_vulnerability_level:
  elemental:
    type: constants.Vulnerability
    init: constants.VulnerabilityUnknown
    import: go.aporeto.io/gaia/constants
  jsonschema:
    type: |-
      {
        "type": "integer",
        "minimum": 0,
        "maximum": 7
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

elemental.Operation:
  elemental:
    type: elemental.Operation
  jsonschema:
    type: |-
      {
        "enum": ["retrieve-many", "retrieve", "create", "update", "delete", "patch", "info"]
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

json.RawMessage:
  elemental:
    type: json.RawMessage
    import: encoding/json
  jsonschema:
    type: |-
      {
        "type": "string"
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

map[string][]map[string]interface{}:
  elemental:
    type: map[string][]map[string]interface{}
    init: map[string][]map[string]interface{}{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        }
      }
  openapi3:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      }

map[string][]string:
  elemental:
    type: map[string][]string
    init: map[string][]string{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
  openapi3:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }

map[string]bool:
  elemental:
    type: map[string]bool
    init: map[string]bool{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "boolean"
        }
      }
  openapi3:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "boolean"
        }
      }

map[string]int:
  elemental:
    type: map[string]int
    init: map[string]int{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "integer"
        }
      }
  openapi3:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "integer"
        }
      }

map[string]interface{}:
  elemental:
    type: map[string]interface{}
    init: map[string]interface{}{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": true
      }
  openapi3:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      }

map[string]map[string][]string:
  elemental:
    type: map[string]map[string][]string
    init: map[string]map[string][]string{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
  openapi3:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }

map[string]map[string]bool:
  elemental:
    type: map[string]map[string]bool
    init: map[string]map[string]bool{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      }
  openapi3:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      }

map[string]map[string]cloudnetworkquerydestination:
  elemental:
    type: map[string]map[string]*CloudNetworkQueryDestination
    init: map[string]map[string]*CloudNetworkQueryDestination{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": true
        }
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

map[string]map[string]interface{}:
  elemental:
    type: map[string]map[string]interface{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": true
        }
      }
  openapi3:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }

map[string]string:
  elemental:
    type: map[string]string
    init: map[string]string{}
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
  openapi3:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }

network:
  elemental:
    type: '*net.IPNet'
    init: '&net.IPNet{}'
  jsonschema:
    type: |-
      {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

networklist:
  elemental:
    type: '[]*net.IPNet'
    init: '[]*net.IPNet{}'
  jsonschema:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

pctimevalue:
  elemental:
    type: interface{}
    init: nil
  jsonschema:
    type: '{}'
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }

uiparametersexpression:
  elemental:
    type: '[][]*UIParameterVisibility'
    init: '[][]*UIParameterVisibility{}'
  jsonschema:
    type: |-
      {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "$ref": "uiparametervisibility.json"
          }
        }
      }
  openapi3: # ignored
    type: |-
      {
        "type": "object"
      }
